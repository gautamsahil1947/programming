commands for git
a1. git clone 
	this command is used to clone a repository from github cloud storage to the local computers.
	the command syntax is $git clone link to the repository
	and the repository will be cloned to the pwd.
02. git status
	if you made any changes to your file then git needs to know about it 
	if it doesn't know then those changes are called untracked changes 
	and a staging area in git is where you keep the final files before changing those things to the local repository 
	it is helpful in many ways like organising the commits, final reviewing etc.
	
	so git status gives a picture of what is going on in the repository or what changes will you be making to it on commiting.
03. git add 
	this command is used to add the changed files to the staging area.
	the syntax is $git add name of the file
	and the file will be added to the staging area
	using the command 'git status' you can see the changes yourself.
04. git commit
	this command is used to commit the changes to the local repository 
	'git commit' takes -m for the message for the commit
	the syntax is 'git commit -m "type the message here"'
	and all the files in the staging area are committed to the local repository

05. git log
	git log will show you your commit history.
06. git push 
	git push is used to push the changes in the local repository to the github repository.
07. git difftool HEAD 'we will talk about this head later.'
	if you modify a file then this command will help you to see the difference between the previous and the modified version


	so you made a change to a file 
	you run git status
		it shows that the file is modified
	you run git add to add the file to the staging area
		the file is added to the staging area, you can run git status to verify
	you run git commit to commit the files in the staging area to the local repository
		and do not forget to add a message to the commit
	then you run git push to push the changes to the cloud
	and that is it.
07. git checkout
	this command is used to undo the changes made basically undo all the uncommitted changes.
	for this you need to play with this command and learn about it.
	the syntax is
		$ git checkout -- hello.py
		$ git checkout -- . this is for all the staged and uncommitted changes.
	revision
	make a file or make some changes
	$ git add file name or $ git add -A
	$ git commit -m 'the message'
	$ git log for checking the commit and also the commit id of the commits.
	$ git push
	this is the sequence in most of the cases.
08. git revert
	git revert is the command used for reverting the changes which were committed 
	so for reverting the commited changes use git log to find the commit id
	then run the git revert command like this 
		$ git revert commit-id
	and the vim editor will show on for showing the reverting action summary 
	exit the vim ui
	and the changes will be reverted for that commit.
	the revert command changes and commits at the same time 
	for explicitly commiting the change later you do the following thing
		$ git revert -n id of the commit
		and then the change will be reverted and the modified file will 
		come to the staging area.






























